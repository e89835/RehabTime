{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortContr = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortContr.signal\n      }).then(res => {\n        console.log(res);\n\n        if (!res.ok) {\n          throw Error('Failed to fetch');\n        }\n\n        return res.json();\n      }).then(data => {\n        console.log(data);\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          console.log(err.message);\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 500);\n    return () => abortContr.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/JuanJo/Desktop/MII/2122/CC/Proyecto/rehabtime/src/useFetch.js"],"names":["useEffect","useState","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortContr","AbortController","setTimeout","fetch","signal","then","res","console","log","ok","Error","json","catch","err","name","message","abort"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACTC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAAEW,QAAAA,MAAM,EAAEJ,UAAU,CAACI;AAArB,OAAN,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAI,CAACA,GAAG,CAACG,EAAT,EAAY;AACR,gBAAMC,KAAK,CAAC,iBAAD,CAAX;AACH;;AACD,eAAOJ,GAAG,CAACK,IAAJ,EAAP;AACH,OAPD,EAQCN,IARD,CAQMX,IAAI,IAAI;AACVa,QAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACAC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAbD,EAcCa,KAdD,CAcOC,GAAG,IAAI;AACV,YAAGA,GAAG,CAACC,IAAJ,KAAa,YAAhB,EAA6B;AACzBP,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEK;AACDD,UAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACE,OAAhB;AACAlB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACc,GAAG,CAACE,OAAL,CAAR;AACH;AACJ,OAtBD;AAuBP,KAxBS,EAwBP,GAxBO,CAAV;AAyBA,WAAO,MAAMf,UAAU,CAACgB,KAAX,EAAb;AACH,GA7BQ,EA6BN,CAACvB,GAAD,CA7BM,CAAT;AA8BA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CApCD;;GAAMN,Q;;AAsCN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const abortContr = new AbortController();\r\n        \r\n        setTimeout(() => {\r\n                fetch(url, { signal: abortContr.signal })\r\n                .then(res => {\r\n                    console.log(res);\r\n                    if (!res.ok){\r\n                        throw Error('Failed to fetch');\r\n                    }\r\n                    return res.json();\r\n                })\r\n                .then(data => {\r\n                    console.log(data);\r\n                    setData(data);\r\n                    setIsPending(false);\r\n                    setError(null);\r\n                })\r\n                .catch(err => {\r\n                    if(err.name === 'AbortError'){\r\n                        console.log('fetch aborted');\r\n                    }else{\r\n                        console.log(err.message);\r\n                        setIsPending(false);\r\n                        setError(err.message);\r\n                    }\r\n                })\r\n        }, 500);\r\n        return () => abortContr.abort();\r\n    }, [url]);\r\n    return {data, isPending, error}\r\n}\r\n\r\nexport default useFetch;\r\n \r\n"]},"metadata":{},"sourceType":"module"}